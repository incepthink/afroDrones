{"ast":null,"code":"var _jsxFileName = \"/Users/alan/Projects/incepthink/afrodronesV1.0.1/src/components/Minting.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport drone from \"../assests/001.gif\";\nimport { ethers } from \"ethers\";\nimport ABI from \"../contracts/ABI.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nftaddress = \"0x37ec1FA103998795b17017aA0B889F0a43477009\";\n\nconst Minting = () => {\n  _s();\n\n  const [mintComplete, setMintComplete] = useState(false);\n  const [address, setaddress] = useState(null);\n  const [isloading, setIsloading] = useState(false);\n\n  const handleChange = () => {\n    // Metamask wallet connect logic here\n    alert.error(\"Please connect to Metamask\");\n  };\n\n  const mint = async () => {\n    // window.ethereum.request\n    if (!window.ethereum || !window.ethereum.isMetaMask) {\n      console.log(\"No metamask\");\n      alert.error(\"Please use a browser with Metamask\");\n      return;\n    } //check chain id\n\n\n    const chainId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n\n    if (chainId !== \"0x1\") {\n      console.log(\"Wrogn Chain\");\n      alert.error(\"Please use Etherium Mainnet \");\n      return;\n    }\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum); // const provider = new ethers.providers.getDefaultProvider(\"inkeby\", {\n    //   infura: \"https://mainnet.infura.io/v3/44c345ec9cac43e3a461dbfffe965e5d\",\n    // });\n\n    try {\n      // console.log(await signer.getAddress());\n      const signer = provider.getSigner(); // setaddress(await signer.getAddress());\n\n      let contract = new ethers.Contract(nftaddress, ABI, signer); // console.log(contract);\n\n      let address = await signer.getAddress(); // console.log(\"ADDRESS\", address);\n\n      setaddress(address); //infura\n      //   setShowModal(false);\n      //   setMintedNum(0);\n      //   setShowMintedModal(true);\n      //   setIsloading(true);\n      //   let priceinnum = 0.08 * num;\n      //   let priceInWei = ethers.utils.parseEther(priceinnum.toString());\n      // console.log(ethers.utils.parseUnits(\"1000000000000000\", \"priceInWei\"));\n      // console.log(wei, priceinnum.toString());\n      // return;\n      // let price = ethers.utils.parseUnits(\"1000000000000000\", \"wei\");\n      //estimate gas\n      //   let gas = await contract.estimateGas.mint(num, {\n      //     value: priceInWei,\n      //   });\n      //   gas = gas.mul(3);\n      //   gas = gas.div(2);\n      //   // console.log(gas.toNumber());\n      //   // return;\n      //   //transaction\n      //   let transaction = await contract.mint(num, {\n      //     value: priceInWei,\n      //     gasLimit: gas,\n      //   });\n      //   await transaction.wait();\n      // console.log(transaction);\n      // console.log(monstersarray);\n\n      setIsloading(false);\n    } catch (err) {\n      console.log(err);\n\n      if (err.message.includes(\"unknown account\")) {\n        alert.error(\"Please connect your Metamask Wallet!\");\n      } else if (err.message.includes(\"Exceeds MAX_Supply\")) {\n        alert.error(\"Payment Failed,exeeded max supply!\");\n      } else if (err.message.includes(\"insufficient funds\")) {\n        alert.error(\"Payment Failed,Insufficient funds in your account!\");\n      } else if (err.message.includes(\"not on the White List\")) {\n        alert.error(\"Payment Failed,Your account is not on the Whitelist!\");\n      } else alert.error(\"Payment Failed, please try again!\"); //   setShowMintedModal(false);\n\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"mint-col\",\n    children: mintComplete ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"claim\",\n        style: {\n          color: \"#fff\"\n        },\n        children: \"YOU HAVE CLAIMED ALL YOUR DRONE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"claim\",\n        style: {\n          marginTop: \"25px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: \"https://opensea.io/collection/afrodroids-by-owo\",\n          children: [\"VIEW COLLECTION ON OPENSEA\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drone-bt-icon\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: drone,\n          alt: \"drone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"claim\",\n        children: \"CLAIM IS LIVE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleChange,\n        className: \"connect\",\n        children: \"CONNECT METAMASK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Minting, \"BDY2Ooj6C/Ua6LBNnWtPp2+NTKQ=\");\n\n_c = Minting;\nexport default Minting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minting\");","map":{"version":3,"sources":["/Users/alan/Projects/incepthink/afrodronesV1.0.1/src/components/Minting.jsx"],"names":["React","useState","drone","ethers","ABI","nftaddress","Minting","mintComplete","setMintComplete","address","setaddress","isloading","setIsloading","handleChange","alert","error","mint","window","ethereum","isMetaMask","console","log","chainId","request","method","provider","providers","Web3Provider","signer","getSigner","contract","Contract","getAddress","err","message","includes","color","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;;;AAEA,MAAMC,UAAU,GAAG,4CAAnB;;AACA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMY,YAAY,GAAG,MAAM;AACzB;AACAC,IAAAA,KAAK,CAACC,KAAN,CAAY,4BAAZ;AACD,GAHD;;AAKA,QAAMC,IAAI,GAAG,YAAY;AACvB;AACA,QAAI,CAACC,MAAM,CAACC,QAAR,IAAoB,CAACD,MAAM,CAACC,QAAP,CAAgBC,UAAzC,EAAqD;AACnDC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAP,MAAAA,KAAK,CAACC,KAAN,CAAY,oCAAZ;AACA;AACD,KANsB,CAOvB;;;AACA,UAAMO,OAAO,GAAG,MAAML,MAAM,CAACC,QAAP,CAAgBK,OAAhB,CAAwB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAxB,CAAtB;;AACA,QAAIF,OAAO,KAAK,KAAhB,EAAuB;AACrBF,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAP,MAAAA,KAAK,CAACC,KAAN,CAAY,8BAAZ;AACA;AACD;;AACD,UAAMU,QAAQ,GAAG,IAAItB,MAAM,CAACuB,SAAP,CAAiBC,YAArB,CAAkCV,MAAM,CAACC,QAAzC,CAAjB,CAduB,CAevB;AACA;AACA;;AAEA,QAAI;AACF;AACA,YAAMU,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf,CAFE,CAGF;;AAEA,UAAIC,QAAQ,GAAG,IAAI3B,MAAM,CAAC4B,QAAX,CAAoB1B,UAApB,EAAgCD,GAAhC,EAAqCwB,MAArC,CAAf,CALE,CAMF;;AACA,UAAInB,OAAO,GAAG,MAAMmB,MAAM,CAACI,UAAP,EAApB,CAPE,CAQF;;AACAtB,MAAAA,UAAU,CAACD,OAAD,CAAV,CATE,CAUF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAvCD,CAuCE,OAAOqB,GAAP,EAAY;AACZb,MAAAA,OAAO,CAACC,GAAR,CAAYY,GAAZ;;AACA,UAAIA,GAAG,CAACC,OAAJ,CAAYC,QAAZ,CAAqB,iBAArB,CAAJ,EAA6C;AAC3CrB,QAAAA,KAAK,CAACC,KAAN,CAAY,sCAAZ;AACD,OAFD,MAEO,IAAIkB,GAAG,CAACC,OAAJ,CAAYC,QAAZ,CAAqB,oBAArB,CAAJ,EAAgD;AACrDrB,QAAAA,KAAK,CAACC,KAAN,CAAY,oCAAZ;AACD,OAFM,MAEA,IAAIkB,GAAG,CAACC,OAAJ,CAAYC,QAAZ,CAAqB,oBAArB,CAAJ,EAAgD;AACrDrB,QAAAA,KAAK,CAACC,KAAN,CAAY,oDAAZ;AACD,OAFM,MAEA,IAAIkB,GAAG,CAACC,OAAJ,CAAYC,QAAZ,CAAqB,uBAArB,CAAJ,EAAmD;AACxDrB,QAAAA,KAAK,CAACC,KAAN,CAAY,sDAAZ;AACD,OAFM,MAEAD,KAAK,CAACC,KAAN,CAAY,mCAAZ,EAVK,CAWZ;;AACD;AACF,GAvED;;AAyEA,sBACE;AAAS,IAAA,SAAS,EAAC,UAAnB;AAAA,cACGR,YAAY,gBACX;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,OAAb;AAAqB,QAAA,KAAK,EAAE;AAAE6B,UAAAA,KAAK,EAAE;AAAT,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAG,QAAA,SAAS,EAAC,OAAb;AAAqB,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAA5B;AAAA,+BACE;AACE,UAAA,MAAM,EAAC,QADT;AAEE,UAAA,IAAI,EAAC,iDAFP;AAAA,mDAI6B,GAJ7B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADW,gBAeX;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACE;AAAK,UAAA,GAAG,EAAEnC,KAAV;AAAiB,UAAA,GAAG,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAG,QAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAQ,QAAA,OAAO,EAAEW,YAAjB;AAA+B,QAAA,SAAS,EAAC,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAhBJ;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAhHD;;GAAMP,O;;KAAAA,O;AAkHN,eAAeA,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport drone from \"../assests/001.gif\";\nimport { ethers } from \"ethers\";\nimport ABI from \"../contracts/ABI.json\";\n\nconst nftaddress = \"0x37ec1FA103998795b17017aA0B889F0a43477009\";\nconst Minting = () => {\n  const [mintComplete, setMintComplete] = useState(false);\n  const [address, setaddress] = useState(null);\n  const [isloading, setIsloading] = useState(false);\n\n  const handleChange = () => {\n    // Metamask wallet connect logic here\n    alert.error(\"Please connect to Metamask\");\n  };\n\n  const mint = async () => {\n    // window.ethereum.request\n    if (!window.ethereum || !window.ethereum.isMetaMask) {\n      console.log(\"No metamask\");\n      alert.error(\"Please use a browser with Metamask\");\n      return;\n    }\n    //check chain id\n    const chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n    if (chainId !== \"0x1\") {\n      console.log(\"Wrogn Chain\");\n      alert.error(\"Please use Etherium Mainnet \");\n      return;\n    }\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // const provider = new ethers.providers.getDefaultProvider(\"inkeby\", {\n    //   infura: \"https://mainnet.infura.io/v3/44c345ec9cac43e3a461dbfffe965e5d\",\n    // });\n\n    try {\n      // console.log(await signer.getAddress());\n      const signer = provider.getSigner();\n      // setaddress(await signer.getAddress());\n\n      let contract = new ethers.Contract(nftaddress, ABI, signer);\n      // console.log(contract);\n      let address = await signer.getAddress();\n      // console.log(\"ADDRESS\", address);\n      setaddress(address);\n      //infura\n      //   setShowModal(false);\n      //   setMintedNum(0);\n      //   setShowMintedModal(true);\n      //   setIsloading(true);\n      //   let priceinnum = 0.08 * num;\n      //   let priceInWei = ethers.utils.parseEther(priceinnum.toString());\n      // console.log(ethers.utils.parseUnits(\"1000000000000000\", \"priceInWei\"));\n      // console.log(wei, priceinnum.toString());\n      // return;\n      // let price = ethers.utils.parseUnits(\"1000000000000000\", \"wei\");\n      //estimate gas\n      //   let gas = await contract.estimateGas.mint(num, {\n      //     value: priceInWei,\n      //   });\n      //   gas = gas.mul(3);\n      //   gas = gas.div(2);\n      //   // console.log(gas.toNumber());\n      //   // return;\n      //   //transaction\n      //   let transaction = await contract.mint(num, {\n      //     value: priceInWei,\n      //     gasLimit: gas,\n      //   });\n      //   await transaction.wait();\n      // console.log(transaction);\n\n      // console.log(monstersarray);\n      setIsloading(false);\n    } catch (err) {\n      console.log(err);\n      if (err.message.includes(\"unknown account\")) {\n        alert.error(\"Please connect your Metamask Wallet!\");\n      } else if (err.message.includes(\"Exceeds MAX_Supply\")) {\n        alert.error(\"Payment Failed,exeeded max supply!\");\n      } else if (err.message.includes(\"insufficient funds\")) {\n        alert.error(\"Payment Failed,Insufficient funds in your account!\");\n      } else if (err.message.includes(\"not on the White List\")) {\n        alert.error(\"Payment Failed,Your account is not on the Whitelist!\");\n      } else alert.error(\"Payment Failed, please try again!\");\n      //   setShowMintedModal(false);\n    }\n  };\n\n  return (\n    <section className=\"mint-col\">\n      {mintComplete ? (\n        <>\n          <p className=\"claim\" style={{ color: \"#fff\" }}>\n            YOU HAVE CLAIMED ALL YOUR DRONE\n          </p>\n          <p className=\"claim\" style={{ marginTop: \"25px\" }}>\n            <a\n              target=\"_blank\"\n              href=\"https://opensea.io/collection/afrodroids-by-owo\"\n            >\n              VIEW COLLECTION ON OPENSEA{\" \"}\n            </a>\n          </p>\n        </>\n      ) : (\n        <>\n          <div className=\"drone-bt-icon\">\n            <img src={drone} alt=\"drone\" />\n          </div>\n          <p className=\"claim\">CLAIM IS LIVE</p>\n          <button onClick={handleChange} className=\"connect\">\n            CONNECT METAMASK\n          </button>\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default Minting;\n"]},"metadata":{},"sourceType":"module"}