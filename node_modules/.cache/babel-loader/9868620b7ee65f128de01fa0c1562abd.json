{"ast":null,"code":"var _jsxFileName = \"/Users/alan/Projects/incepthink/afrodronesV1.0.1/src/components/Minting.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport drone from \"../assests/001.gif\";\nimport { ethers } from \"ethers\";\nimport ABI from \"../Blockchain/ABI.json\";\nimport { useAlert } from \"react-alert\";\nimport loading from \"../assests/loading.gif\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nftaddress = \"0x8f15C7D9726373dC1A1b5641f523dFAbA2db42e0\";\n\nconst Minting = () => {\n  _s();\n\n  const alert = useAlert();\n  const [mintComplete, setMintComplete] = useState(false);\n  const [address, setaddress] = useState(null);\n  const [isloading, setIsloading] = useState(false);\n  const [status, setStatus] = useState(\"init\");\n  const [num, setNum] = useState(0);\n  const [claims, setClaims] = useState(0);\n  useEffect(() => {\n    findClaims();\n  }, [address]);\n\n  const connectWallet = async () => {\n    console.log(\"CONNET WALLET\"); // window.ethereum.request\n\n    if (!window.ethereum || !window.ethereum.isMetaMask) {\n      console.log(\"No metamask\");\n      alert.error(\"Please use a browser with Metamask\");\n      return;\n    } //check chain id\n\n\n    const chainId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    }); // if (chainId !== \"0x1\") {\n    //   console.log(\"Wrogn Chain\");\n    //   alert.error(\"Please use Etherium Mainnet \");\n    //   return;\n    // }\n\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\"); // Prompt user for account connections\n\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      let address = await signer.getAddress();\n      console.log(\"ADDRESS\", address);\n      setaddress(address);\n      setStatus(\"connected\");\n    } catch (err) {\n      console.log(err);\n\n      if (err.message.includes(\"unknown account\")) {\n        alert.error(\"Please connect your Metamask Wallet!\");\n      } else alert.error(\"Sorry, An Error Occured!\"); //   setShowMintedModal(false);\n\n    }\n  };\n\n  const findClaims = async () => {\n    if (address == null) {\n      alert.error(\"Could not get address from metamas!\");\n      return;\n    }\n\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(nftaddress, ABI, signer);\n      const claim = await contract.availableClaims(address);\n      setClaims(claim.toNumber());\n    } catch (err) {\n      console.log(\"error finding claims\", err);\n    }\n  };\n\n  const mint = async () => {\n    // window.ethereum.request\n    if (!window.ethereum || !window.ethereum.isMetaMask) {\n      console.log(\"No metamask\");\n      alert.error(\"Please use a browser with Metamask\");\n      return;\n    } //check chain id\n\n\n    const chainId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n\n    if (chainId !== \"0x1\") {\n      console.log(\"Wrogn Chain\");\n      alert.error(\"Please use Etherium Mainnet \");\n      return;\n    }\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum); // const provider = new ethers.providers.getDefaultProvider(\"inkeby\", {\n    //   infura: \"https://mainnet.infura.io/v3/44c345ec9cac43e3a461dbfffe965e5d\",\n    // });\n\n    try {\n      // console.log(await signer.getAddress());\n      const signer = provider.getSigner(); // setaddress(await signer.getAddress());\n\n      let contract = new ethers.Contract(nftaddress, ABI, signer); // console.log(contract);\n\n      let address = await signer.getAddress(); // console.log(\"ADDRESS\", address);\n\n      setaddress(address); //infura\n      //   setShowModal(false);\n      //   setMintedNum(0);\n      //   setShowMintedModal(true);\n      //   setIsloading(true);\n      //   let priceinnum = 0.08 * num;\n      //   let priceInWei = ethers.utils.parseEther(priceinnum.toString());\n      // console.log(ethers.utils.parseUnits(\"1000000000000000\", \"priceInWei\"));\n      // console.log(wei, priceinnum.toString());\n      // return;\n      // let price = ethers.utils.parseUnits(\"1000000000000000\", \"wei\");\n      //estimate gas\n      //   let gas = await contract.estimateGas.mint(num, {\n      //     value: priceInWei,\n      //   });\n      //   gas = gas.mul(3);\n      //   gas = gas.div(2);\n      //   // console.log(gas.toNumber());\n      //   // return;\n      //   //transaction\n      //   let transaction = await contract.mint(num, {\n      //     value: priceInWei,\n      //     gasLimit: gas,\n      //   });\n      //   await transaction.wait();\n      // console.log(transaction);\n      // console.log(monstersarray);\n\n      setIsloading(false);\n    } catch (err) {\n      console.log(err);\n\n      if (err.message.includes(\"unknown account\")) {\n        alert.error(\"Please connect your Metamask Wallet!\");\n      } else if (err.message.includes(\"Exceeds MAX_Supply\")) {\n        alert.error(\"Payment Failed,exeeded max supply!\");\n      } else if (err.message.includes(\"insufficient funds\")) {\n        alert.error(\"Payment Failed,Insufficient funds in your account!\");\n      } else if (err.message.includes(\"not on the White List\")) {\n        alert.error(\"Payment Failed,Your account is not on the Whitelist!\");\n      } else alert.error(\"Payment Failed, please try again!\"); //   setShowMintedModal(false);\n\n    }\n  };\n\n  const InitComponent = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drone-bt-icon\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: drone,\n          alt: \"drone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"claim\",\n        children: \"CLAIM IS LIVE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        className: \"connect\",\n        children: \"CONNECT METAMASK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  const ClaimComponent = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drone-bt-icon\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: drone,\n          alt: \"drone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"claim\",\n        children: [claims, \" CLAIMS LEFT IN YOUR WALLET\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"\",\n        id: \"address-text\",\n        children: [\"Connected with \", address.slice(0, 5), \"...\", address.slice(-3)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: connectWallet,\n        className: \"mint-num\",\n        children: [\"CLAIM : \", num, \" DRONES\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (num < claims) setNum(num + 1);\n          },\n          children: [\" \", \"+\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (num > 0) {\n              setNum(num - 1);\n            }\n          },\n          children: [\"-\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        className: \"connect\",\n        children: \"MINT DRONES\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  const LoadingPopup = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loading,\n          alt: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"mint-col\",\n    children: mintComplete ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"claim\",\n        style: {\n          color: \"#fff\"\n        },\n        children: \"YOU HAVE CLAIMED ALL YOUR DRONE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"claim\",\n        style: {\n          marginTop: \"25px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: \"https://opensea.io/collection/afrodroids-by-owo\",\n          children: [\"VIEW COLLECTION ON OPENSEA\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : status == \"init\" ? InitComponent() : status == \"connected\" ? ClaimComponent() : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Minting, \"wDfMztUPXMrv1fMAbQZtLal22Vo=\", false, function () {\n  return [useAlert];\n});\n\n_c = Minting;\nexport default Minting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minting\");","map":{"version":3,"sources":["/Users/alan/Projects/incepthink/afrodronesV1.0.1/src/components/Minting.jsx"],"names":["React","useState","useEffect","drone","ethers","ABI","useAlert","loading","nftaddress","Minting","alert","mintComplete","setMintComplete","address","setaddress","isloading","setIsloading","status","setStatus","num","setNum","claims","setClaims","findClaims","connectWallet","console","log","window","ethereum","isMetaMask","error","chainId","request","method","provider","providers","Web3Provider","send","signer","getSigner","getAddress","err","message","includes","contract","Contract","claim","availableClaims","toNumber","mint","InitComponent","ClaimComponent","slice","LoadingPopup","color","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport drone from \"../assests/001.gif\";\nimport { ethers } from \"ethers\";\nimport ABI from \"../Blockchain/ABI.json\";\nimport { useAlert } from \"react-alert\";\nimport loading from \"../assests/loading.gif\";\n\nconst nftaddress = \"0x8f15C7D9726373dC1A1b5641f523dFAbA2db42e0\";\nconst Minting = () => {\n  const alert = useAlert();\n\n  const [mintComplete, setMintComplete] = useState(false);\n  const [address, setaddress] = useState(null);\n  const [isloading, setIsloading] = useState(false);\n  const [status, setStatus] = useState(\"init\");\n  const [num, setNum] = useState(0);\n  const [claims, setClaims] = useState(0);\n\n  useEffect(() => {\n    findClaims();\n  }, [address]);\n\n  const connectWallet = async () => {\n    console.log(\"CONNET WALLET\");\n    // window.ethereum.request\n    if (!window.ethereum || !window.ethereum.isMetaMask) {\n      console.log(\"No metamask\");\n      alert.error(\"Please use a browser with Metamask\");\n      return;\n    }\n    //check chain id\n    const chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n    // if (chainId !== \"0x1\") {\n    //   console.log(\"Wrogn Chain\");\n    //   alert.error(\"Please use Etherium Mainnet \");\n    //   return;\n    // }\n    try {\n      const provider = new ethers.providers.Web3Provider(\n        window.ethereum,\n        \"any\"\n      );\n      // Prompt user for account connections\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n\n      let address = await signer.getAddress();\n      console.log(\"ADDRESS\", address);\n      setaddress(address);\n      setStatus(\"connected\");\n    } catch (err) {\n      console.log(err);\n      if (err.message.includes(\"unknown account\")) {\n        alert.error(\"Please connect your Metamask Wallet!\");\n      } else alert.error(\"Sorry, An Error Occured!\");\n      //   setShowMintedModal(false);\n    }\n  };\n\n  const findClaims = async () => {\n    if (address == null) {\n      alert.error(\"Could not get address from metamas!\");\n      return;\n    }\n    try {\n      const provider = new ethers.providers.Web3Provider(\n        window.ethereum,\n        \"any\"\n      );\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(nftaddress, ABI, signer);\n      const claim = await contract.availableClaims(address);\n      setClaims(claim.toNumber());\n    } catch (err) {\n      console.log(\"error finding claims\", err);\n    }\n  };\n\n  const mint = async () => {\n    // window.ethereum.request\n    if (!window.ethereum || !window.ethereum.isMetaMask) {\n      console.log(\"No metamask\");\n      alert.error(\"Please use a browser with Metamask\");\n      return;\n    }\n    //check chain id\n    const chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n    if (chainId !== \"0x1\") {\n      console.log(\"Wrogn Chain\");\n      alert.error(\"Please use Etherium Mainnet \");\n      return;\n    }\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // const provider = new ethers.providers.getDefaultProvider(\"inkeby\", {\n    //   infura: \"https://mainnet.infura.io/v3/44c345ec9cac43e3a461dbfffe965e5d\",\n    // });\n\n    try {\n      // console.log(await signer.getAddress());\n      const signer = provider.getSigner();\n      // setaddress(await signer.getAddress());\n\n      let contract = new ethers.Contract(nftaddress, ABI, signer);\n      // console.log(contract);\n      let address = await signer.getAddress();\n      // console.log(\"ADDRESS\", address);\n      setaddress(address);\n      //infura\n      //   setShowModal(false);\n      //   setMintedNum(0);\n      //   setShowMintedModal(true);\n      //   setIsloading(true);\n      //   let priceinnum = 0.08 * num;\n      //   let priceInWei = ethers.utils.parseEther(priceinnum.toString());\n      // console.log(ethers.utils.parseUnits(\"1000000000000000\", \"priceInWei\"));\n      // console.log(wei, priceinnum.toString());\n      // return;\n      // let price = ethers.utils.parseUnits(\"1000000000000000\", \"wei\");\n      //estimate gas\n      //   let gas = await contract.estimateGas.mint(num, {\n      //     value: priceInWei,\n      //   });\n      //   gas = gas.mul(3);\n      //   gas = gas.div(2);\n      //   // console.log(gas.toNumber());\n      //   // return;\n      //   //transaction\n      //   let transaction = await contract.mint(num, {\n      //     value: priceInWei,\n      //     gasLimit: gas,\n      //   });\n      //   await transaction.wait();\n      // console.log(transaction);\n\n      // console.log(monstersarray);\n      setIsloading(false);\n    } catch (err) {\n      console.log(err);\n      if (err.message.includes(\"unknown account\")) {\n        alert.error(\"Please connect your Metamask Wallet!\");\n      } else if (err.message.includes(\"Exceeds MAX_Supply\")) {\n        alert.error(\"Payment Failed,exeeded max supply!\");\n      } else if (err.message.includes(\"insufficient funds\")) {\n        alert.error(\"Payment Failed,Insufficient funds in your account!\");\n      } else if (err.message.includes(\"not on the White List\")) {\n        alert.error(\"Payment Failed,Your account is not on the Whitelist!\");\n      } else alert.error(\"Payment Failed, please try again!\");\n      //   setShowMintedModal(false);\n    }\n  };\n\n  const InitComponent = () => {\n    return (\n      <>\n        <div className=\"drone-bt-icon\">\n          <img src={drone} alt=\"drone\" />\n        </div>\n        <p className=\"claim\">CLAIM IS LIVE</p>\n        <button onClick={connectWallet} className=\"connect\">\n          CONNECT METAMASK\n        </button>\n      </>\n    );\n  };\n\n  const ClaimComponent = () => {\n    return (\n      <>\n        <div className=\"drone-bt-icon\">\n          <img src={drone} alt=\"drone\" />\n        </div>\n        <p className=\"claim\">{claims} CLAIMS LEFT IN YOUR WALLET</p>\n        <p className=\"\" id=\"address-text\">\n          Connected with {address.slice(0, 5)}...{address.slice(-3)}\n        </p>\n        <p onClick={connectWallet} className=\"mint-num\">\n          CLAIM : {num} DRONES{\" \"}\n          <button\n            onClick={() => {\n              if (num < claims) setNum(num + 1);\n            }}\n          >\n            {\" \"}\n            +\n          </button>{\" \"}\n          <button\n            onClick={() => {\n              if (num > 0) {\n                setNum(num - 1);\n              }\n            }}\n          >\n            -{\" \"}\n          </button>\n        </p>\n        <button onClick={connectWallet} className=\"connect\">\n          MINT DRONES\n        </button>\n      </>\n    );\n  };\n\n  const LoadingPopup = () => {\n    return (\n      <div className=\"modal\">\n        <div className=\"overlay\"></div>\n        <div className=\"modal-content\">\n          <img src={loading} alt=\"Loading...\" />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <section className=\"mint-col\">\n      {/* <LoadingPopup /> */}\n      {mintComplete ? (\n        <>\n          <p className=\"claim\" style={{ color: \"#fff\" }}>\n            YOU HAVE CLAIMED ALL YOUR DRONE\n          </p>\n          <p className=\"claim\" style={{ marginTop: \"25px\" }}>\n            <a\n              target=\"_blank\"\n              href=\"https://opensea.io/collection/afrodroids-by-owo\"\n            >\n              VIEW COLLECTION ON OPENSEA{\" \"}\n            </a>\n          </p>\n        </>\n      ) : status == \"init\" ? (\n        InitComponent()\n      ) : status == \"connected\" ? (\n        ClaimComponent()\n      ) : null}\n    </section>\n  );\n};\n\nexport default Minting;\n"]},"metadata":{},"sourceType":"module"}